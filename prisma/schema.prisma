// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  backups    Backup[]
  shareLinks ShareLink[]

  firstSubscribed DateTime?
  subscribedSince DateTime?
  lifetime        Boolean   @default(false)

  discordId   BigInt?      @unique
  discordUser DiscordUser? @relation(fields: [discordId], references: [id], onDelete: SetNull)
  guildedId   String?      @unique
  guildedUser GuildedUser? @relation(fields: [guildedId], references: [id], onDelete: SetNull)
}

model DiscordUser {
  id            BigInt          @id
  name          String
  globalName    String?
  discriminator String
  avatar        String?
  members       DiscordMember[]

  user User?
}

model GuildedUser {
  id        String  @id
  name      String
  avatarUrl String?

  user User?
}

model DiscordGuild {
  id   BigInt  @id
  name String
  icon String?

  roles   DiscordRole[]
  members DiscordMember[]
  backups Backup[]
}

model DiscordRole {
  id      BigInt       @id
  guildId BigInt
  guild   DiscordGuild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  name         String
  color        Int     @default(0)
  permissions  BigInt  @default(0)
  icon         String?
  unicodeEmoji String?
  position     Int
  hoist        Boolean @default(false)
  managed      Boolean @default(false)
  mentionable  Boolean @default(false)

  @@unique([guildId, id])
}

model DiscordMember {
  userId  BigInt
  guildId BigInt

  user  DiscordUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild DiscordGuild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, userId])
}

model GuildedServer {
  id        String  @id
  name      String
  avatarUrl String?

  backups Backup[]
}

model ShareLink {
  id        Int      @id @default(autoincrement())
  shareId   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  origin    String?

  userId Int?
  user   User? @relation(fields: [userId], references: [id])
}

model Backup {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  dataVersion String
  data        Json

  ownerId Int
  owner   User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  guilds  DiscordGuild[]
  servers GuildedServer[]
}
